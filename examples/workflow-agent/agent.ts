// Copyright 2025 Geanderson Lemonte
// Based on Google ADK libraries
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import * as dotenv from 'dotenv';
dotenv.config({ override: true });

import { Agent, LlmAgent } from '../../src';

// Code Writer Agent
// Takes the initial specification (from user query) and writes code.
export const codeWriterAgent = new Agent({
  name: 'CodeWriterAgent',
  model: 'gemini-1.5-flash',
  description: 'Writes initial Python code based on a specification.',
  instruction: `You are a Python Code Generator.
Based *only* on the user's request, write Python code that fulfills the requirement.
Output *only* the complete Python code block, enclosed in triple backticks (\`\`\`python ... \`\`\`).
Do not add any other text before or after the code block.`
});

// Code Reviewer Agent
// Takes the code generated by the previous agent and provides feedback.
export const codeReviewerAgent = new Agent({
  name: 'CodeReviewerAgent',
  model: 'gemini-2.0-flash',
  description: 'Reviews Python code and provides constructive feedback.',
  instruction: `You are an expert Python Code Reviewer.
Your task is to provide constructive feedback on the provided code.

**Review Criteria:**
1. **Correctness:** Does the code work as intended? Are there logic errors?
2. **Readability:** Is the code clear and easy to understand? Follows PEP 8 style guidelines?
3. **Efficiency:** Is the code reasonably efficient? Any obvious performance bottlenecks?
4. **Edge Cases:** Does the code handle potential edge cases or invalid inputs gracefully?
5. **Best Practices:** Does the code follow common Python best practices?

**Output:**
Provide your feedback as a concise, bulleted list. Focus on the most important points for improvement.
If the code is excellent and requires no changes, simply state: "No major issues found."
Output *only* the review comments or the "No major issues" statement.`
});

// Code Refactorer Agent
// Takes the original code and review comments, then improves the code.
export const codeRefactorerAgent = new Agent({
  name: 'CodeRefactorerAgent',
  model: 'gemini-2.0-flash',
  description: 'Refactors Python code based on review feedback.',
  instruction: `You are a Python Code Refactorer.
Your goal is to improve the given Python code based on the provided review comments.

**Task:**
Carefully apply the suggestions from the review comments to refactor the original code.
If the review comments state "No major issues found," return the original code unchanged.
Ensure the final code is complete, functional, and includes necessary imports and docstrings.

**Output:**
Output *only* the final, refactored Python code block, enclosed in triple backticks (\`\`\`python ... \`\`\`).
Do not add any other text before or after the code block.`
});

// Sequential Workflow Agent
// Orchestrates the entire workflow: Code Generation -> Review -> Refactoring
export const workflowAgent = new Agent({
  name: 'WorkflowAgent',
  model: 'gemini-2.0-flash',
  description: 'Orchestrates a sequential workflow of code generation, review, and refactoring.',
  instruction: `You are a Workflow Orchestrator for a code development pipeline.

Your job is to coordinate a 3-step process:
1. **Code Generation**: Generate initial Python code based on user requirements
2. **Code Review**: Review the generated code and provide feedback
3. **Code Refactoring**: Improve the code based on review feedback

For each step, you will:
- Clearly indicate which step you're performing
- Show the input and output for each step
- Provide a final summary of the entire workflow

Always be thorough and explain what's happening at each stage.`
});

// Helper class to simulate sequential workflow
export class SequentialWorkflow {
  private steps: { agent: LlmAgent; name: string; description: string }[];
  private state: Record<string, any> = {};

  constructor() {
    this.steps = [
      {
        agent: codeWriterAgent,
        name: 'Code Generation',
        description: 'Generate initial Python code'
      },
      {
        agent: codeReviewerAgent,
        name: 'Code Review',
        description: 'Review the generated code'
      },
      {
        agent: codeRefactorerAgent,
        name: 'Code Refactoring',
        description: 'Refactor code based on review'
      }
    ];
  }

  getSteps() {
    return this.steps;
  }

  getState() {
    return this.state;
  }

  setState(key: string, value: any) {
    this.state[key] = value;
  }

  getStateValue(key: string) {
    return this.state[key];
  }

  clearState() {
    this.state = {};
  }
}